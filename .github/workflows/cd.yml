name: Continuous Delivery
# This workflow is triggered on pushes to the repository.
on: push
#  push:
#    branches:
#      - master

jobs:
  build:
    name: Build Docker Image and Push to Amazon ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          path: main
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $GITHUB_WORKSPACE/main
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Checkout cloud_infrastructure
        uses: actions/checkout@v2
        with:
          repository: bitmatica/cloud_infrastructure
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_GITHUB }}
          path: cloud_infrastructure
      - name: Update Dev Environment with new Image Tag
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          git config --global user.email "github-actions@bitmatica.com"
          git config --global user.name "github actions"
          cd $GITHUB_WORKSPACE/cloud_infrastructure/blogmatica/dev
          echo "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" > backend_version.txt
          git add backend_version.txt
          git commit -m "Update $ECR_REPOSITORY dev version to $IMAGE_TAG"
          git push origin master
      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
