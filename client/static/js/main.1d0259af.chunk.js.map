{"version":3,"sources":["config.ts","utilities/jwtHelpers.ts","theme.ts","store/CurrentUser.ts","store/RootStore.ts","graphql/index.tsx","components/common/LoadingContainer.tsx","components/common/PrivateRoute.tsx","components/common/InlineStack.tsx","components/common/InputWithLabel.tsx","components/common/Form.tsx","components/common/LoginUserForm.tsx","hooks/useLogin.ts","hooks/useLogout.tsx","components/common/LogoutButton.tsx","components/common/Header.tsx","pages/Layout.tsx","pages/Login.tsx","components/Post.tsx","components/Posts.tsx","components/UserProfile.tsx","hooks/useCreatePost.ts","components/CreatePostForm.tsx","pages/Home.tsx","pages/User.tsx","components/common/OnlyLoggedOutRoute.tsx","components/common/FormInputs.tsx","components/common/RegisterUserForm.tsx","pages/RegisterUser.tsx","pages/OAuthApps.tsx","pages/GustoLogin.tsx","App.tsx","getApolloClient.ts","serviceWorker.ts","index.tsx"],"names":["JWT_SESSION_STORAGE_KEY","setJwt","jwt","sessionStorage","setItem","getJwt","getItem","theme","breakpoints","fonts","heading","body","mono","colors","primary","buttons","variants","maxWidth","color","bg","fontSizes","xs","sm","md","lg","xl","CurrentUser","types","model","id","email","actions","self","updateUser","reset","views","isLoggedIn","Boolean","store","currentUser","create","StoreContext","createContext","useStore","useContext","StoreProvider","Provider","PostFragmentDoc","gql","UserWithPostsFragmentDoc","AllPostsDocument","UserWithPostsDocument","CreatePostDocument","WhoAmIDocument","useWhoAmIQuery","baseOptions","ApolloReactHooks","LoginDocument","LogoutDocument","CreateUserDocument","LoadingContainer","loading","children","Spinner","thickness","speed","emptyColor","size","PrivateRoute","redirect","location","mustBeLoggedOut","rest","fetchPolicy","data","whoAmI","shouldRedirect","to","pathname","state","from","InlineStack","props","Stack","isInline","align","InputWithLabel","name","label","labelWidth","my","FormLabel","width","htmlFor","Input","display","Form","onSubmit","FormControl","LoginUserForm","handleSubmit","errorMessage","useState","password","inputs","setInputs","handleInputChange","event","currentTarget","value","e","preventDefault","Text","fontSize","type","autoComplete","placeholder","onChange","isRequired","Flex","direction","justifyContent","Button","useLogin","useLoginResult","called","login","token","useEffect","Error","user","useLogout","logoutMutationResult","apolloClient","useApolloClient","logout","success","writeQuery","query","LogoutButton","variant","onClick","Header","pollInterval","height","backgroundColor","Icon","ml","mr","Layout","border","alignContent","minHeight","Box","sizes","mx","pt","flexGrow","Login","setErrorMessage","message","variables","a","Post","post","title","Posts","posts","length","map","p","key","UserProfile","userId","useCreatePost","update","cache","createPost","allPostsCache","readQuery","produce","draftAllPostsCache","push","CreatePostForm","authorId","setTitle","setBody","newTitle","target","newBody","Home","User","match","params","OnlyLoggedOutRoute","SPECIAL_INPUTS","FormInputs","values","handleChange","Object","keys","includes","capitalize","get","RegisterUserForm","handleUpdate","INITIAL_REGISTER_USER_FORM_STATE","RegisterUser","createUser","registerUserData","loginData","OAuthApps","href","GustoLogin","error","setError","isLoaded","setIsLoaded","fetch","SERVER_REST_URI","headers","then","res","json","result","window","uri","authLink","setContext","_","authorization","errorLink","onError","graphQLErrors","networkError","locations","path","console","log","httpLink","createHttpLink","InMemoryCache","ApolloClient","link","ApolloLink","connectToDevTools","getApolloClient","App","ThemeProvider","CSSReset","client","component","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d0259af.chunk.js","sourcesContent":["export const APP_NAME = \"todoapp\";\nexport const SERVER_URI = \"https://gusto.apps.bitmatica.com/graphql\";\nexport const SERVER_REST_URI = \"https://gusto.apps.bitmatica.com\";\nexport const JWT_SESSION_STORAGE_KEY = `${APP_NAME}_jwt`;\n","import { JWT_SESSION_STORAGE_KEY } from \"../config\";\n\nexport function setJwt(jwt: string): void {\n  sessionStorage.setItem(JWT_SESSION_STORAGE_KEY, jwt);\n}\n\nexport function resetJwt(): void {\n  setJwt(\"\");\n}\n\nexport function getJwt(): string | null {\n  return sessionStorage.getItem(JWT_SESSION_STORAGE_KEY);\n}\n","import { theme } from \"@chakra-ui/core\";\n\nexport default {\n  ...theme,\n  breakpoints: [\"30em\", \"48em\", \"62em\", \"80em\"],\n  fonts: {\n    heading: '\"Avenir Next\", sans-serif',\n    body: \"system-ui, sans-serif\",\n    mono: \"Menlo, monospace\",\n  },\n  colors: {\n    ...theme.colors,\n    primary: \"purple\",\n  },\n  buttons: {\n    variants: {\n      primary: {\n        maxWidth: \"120px\",\n        color: \"white\",\n        bg: \"primary\",\n      },\n    },\n  },\n  fontSizes: {\n    ...theme.fontSizes,\n    xs: \"0.75rem\",\n    sm: \"0.875rem\",\n    md: \"1rem\",\n    lg: \"1.125rem\",\n    xl: \"1.25rem\",\n    \"2xl\": \"1.5rem\",\n    \"3xl\": \"1.875rem\",\n    \"4xl\": \"2.25rem\",\n    \"5xl\": \"3rem\",\n    \"6xl\": \"4rem\",\n  },\n};\n","import { types, Instance, ModelActions } from \"mobx-state-tree\";\n\nconst CURRENT_USER_MODEL_NAME = \"CurrentUser\";\n\nconst CurrentUser = types\n  .model(CURRENT_USER_MODEL_NAME, {\n    id: \"\",\n    email: \"\",\n  })\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  .actions(\n    (self): ModelActions => ({\n      updateUser({ id, email }: { id?: string; email?: string }): void {\n        self.id = id || self.id;\n        self.email = email || self.email;\n      },\n      reset(): void {\n        self.id = \"\";\n        self.email = \"\";\n      },\n    }),\n  )\n  .views(\n    (self): ModelActions => ({\n      isLoggedIn(): boolean {\n        return Boolean(self.id);\n      },\n    }),\n  );\n\nexport type CurrentUserModel = Instance<typeof CurrentUser>;\n\nexport default CurrentUser;\n","import { createContext, useContext } from \"react\";\nimport { Instance, types } from \"mobx-state-tree\";\nimport CurrentUser from \"./CurrentUser\";\n\nconst RootStore = types.model(\"RootStore\", {\n  currentUser: CurrentUser,\n});\n\nexport type RootStoreModel = Instance<typeof RootStore>;\n\nexport default function createStore(): RootStoreModel {\n  return RootStore.create({\n    currentUser: CurrentUser.create({}),\n  });\n}\n\nconst store = createStore();\nconst StoreContext = createContext<RootStoreModel>(store);\nexport const useStore = (): RootStoreModel => useContext(StoreContext);\nexport const StoreProvider = StoreContext.Provider;\n","/* AUTOMATICALLY GENERATED BY `yarn codegen`. DO NOT EDIT. */\n/* eslint-disable */\n\nimport gql from \"graphql-tag\";\nimport * as ApolloReactCommon from \"@apollo/react-common\";\nimport * as ApolloReactHooks from \"@apollo/react-hooks\";\nexport type Maybe<T> = T | null;\n\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n    ID: string;\n    String: string;\n    Boolean: boolean;\n    Int: number;\n    Float: number;\n    /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */\n    DateTime: any;\n};\n\nexport type Comment = {\n    __typename?: \"Comment\";\n    id: Scalars[\"ID\"];\n    createdAt: Scalars[\"DateTime\"];\n    updatedAt: Scalars[\"DateTime\"];\n    body: Scalars[\"String\"];\n    author: User;\n    post: Post;\n    authorId: Scalars[\"String\"];\n    postId: Scalars[\"String\"];\n};\n\nexport type CommentCreationResponse = {\n    __typename?: \"CommentCreationResponse\";\n    success: Scalars[\"Boolean\"];\n    message: Scalars[\"String\"];\n    comment?: Maybe<Comment>;\n};\n\nexport type CommentUpdateResponse = {\n    __typename?: \"CommentUpdateResponse\";\n    success: Scalars[\"Boolean\"];\n    message: Scalars[\"String\"];\n    comment?: Maybe<Comment>;\n};\n\nexport type CreateCommentInput = {\n    body: Scalars[\"String\"];\n    authorId: Scalars[\"String\"];\n    postId: Scalars[\"String\"];\n};\n\nexport type CreatePostInput = {\n    title: Scalars[\"String\"];\n    body: Scalars[\"String\"];\n};\n\nexport type CreateUserInput = {\n    email: Scalars[\"String\"];\n    password: Scalars[\"String\"];\n};\n\nexport type DeletionResponse = {\n    __typename?: \"DeletionResponse\";\n    success: Scalars[\"Boolean\"];\n    message: Scalars[\"String\"];\n};\n\nexport type Mutation = {\n    __typename?: \"Mutation\";\n    createComment: CommentCreationResponse;\n    createPost: PostCreationResponse;\n    createUser: UserCreationResponse;\n    deleteComment: DeletionResponse;\n    deletePost: DeletionResponse;\n    deleteUser: DeletionResponse;\n    login: UserLoginResponse;\n    logout: MutationResponse;\n    updateAuth?: Maybe<UpdateAuthReturn>;\n    updateComment: CommentUpdateResponse;\n    updatePost: PostUpdateResponse;\n    updateUser: UserUpdateResponse;\n};\n\nexport type MutationCreateCommentArgs = {\n    input: CreateCommentInput;\n};\n\nexport type MutationCreatePostArgs = {\n    input: CreatePostInput;\n};\n\nexport type MutationCreateUserArgs = {\n    input: CreateUserInput;\n};\n\nexport type MutationDeleteCommentArgs = {\n    id: Scalars[\"ID\"];\n};\n\nexport type MutationDeletePostArgs = {\n    id: Scalars[\"ID\"];\n};\n\nexport type MutationDeleteUserArgs = {\n    id: Scalars[\"ID\"];\n};\n\nexport type MutationLoginArgs = {\n    input: UserLoginArgs;\n};\n\nexport type MutationUpdateAuthArgs = {\n    newState: Scalars[\"Boolean\"];\n};\n\nexport type MutationUpdateCommentArgs = {\n    input: UpdateCommentInput;\n    id: Scalars[\"ID\"];\n};\n\nexport type MutationUpdatePostArgs = {\n    input: UpdatePostInput;\n    id: Scalars[\"ID\"];\n};\n\nexport type MutationUpdateUserArgs = {\n    input: UpdateUserInput;\n    id: Scalars[\"ID\"];\n};\n\nexport type MutationResponse = {\n    __typename?: \"MutationResponse\";\n    success: Scalars[\"Boolean\"];\n    message: Scalars[\"String\"];\n};\n\nexport type Post = {\n    __typename?: \"Post\";\n    id: Scalars[\"ID\"];\n    createdAt: Scalars[\"DateTime\"];\n    updatedAt: Scalars[\"DateTime\"];\n    title: Scalars[\"String\"];\n    body: Scalars[\"String\"];\n    author: User;\n    comments: Array<Comment>;\n    authorId: Scalars[\"String\"];\n};\n\nexport type PostCreationResponse = {\n    __typename?: \"PostCreationResponse\";\n    success: Scalars[\"Boolean\"];\n    message: Scalars[\"String\"];\n    post?: Maybe<Post>;\n};\n\nexport type PostUpdateResponse = {\n    __typename?: \"PostUpdateResponse\";\n    success: Scalars[\"Boolean\"];\n    message: Scalars[\"String\"];\n    post?: Maybe<Post>;\n};\n\nexport type Query = {\n    __typename?: \"Query\";\n    comment?: Maybe<Comment>;\n    comments: Array<Comment>;\n    isAuthenticated: Scalars[\"Boolean\"];\n    post?: Maybe<Post>;\n    posts: Array<Post>;\n    user?: Maybe<User>;\n    users: Array<User>;\n    whoAmI?: Maybe<User>;\n};\n\nexport type QueryCommentArgs = {\n    id: Scalars[\"ID\"];\n};\n\nexport type QueryPostArgs = {\n    id: Scalars[\"ID\"];\n};\n\nexport type QueryUserArgs = {\n    id: Scalars[\"ID\"];\n};\n\nexport type UpdateAuthReturn = {\n    __typename?: \"UpdateAuthReturn\";\n    isAuthed: Scalars[\"Boolean\"];\n};\n\nexport type UpdateCommentInput = {\n    body?: Maybe<Scalars[\"String\"]>;\n    authorId?: Maybe<Scalars[\"String\"]>;\n    postId?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type UpdatePostInput = {\n    title?: Maybe<Scalars[\"String\"]>;\n    body?: Maybe<Scalars[\"String\"]>;\n    authorId?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type UpdateUserInput = {\n    email?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type User = {\n    __typename?: \"User\";\n    id: Scalars[\"ID\"];\n    createdAt: Scalars[\"DateTime\"];\n    updatedAt: Scalars[\"DateTime\"];\n    email: Scalars[\"String\"];\n    posts: Array<Post>;\n    comments: Array<Comment>;\n};\n\nexport type UserCreationResponse = {\n    __typename?: \"UserCreationResponse\";\n    success: Scalars[\"Boolean\"];\n    message: Scalars[\"String\"];\n    user?: Maybe<User>;\n};\n\nexport type UserLoginArgs = {\n    email: Scalars[\"String\"];\n    password: Scalars[\"String\"];\n};\n\nexport type UserLoginResponse = {\n    __typename?: \"UserLoginResponse\";\n    success: Scalars[\"Boolean\"];\n    message: Scalars[\"String\"];\n    user?: Maybe<User>;\n    token?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type UserUpdateResponse = {\n    __typename?: \"UserUpdateResponse\";\n    success: Scalars[\"Boolean\"];\n    message: Scalars[\"String\"];\n    user?: Maybe<User>;\n};\n\nexport type PostFragment = { __typename?: \"Post\" } & Pick<Post, \"id\" | \"title\" | \"body\"> & {\n        author: { __typename?: \"User\" } & Pick<User, \"email\">;\n    };\n\nexport type UserWithPostsFragment = { __typename?: \"User\" } & Pick<User, \"email\"> & {\n        posts: Array<{ __typename?: \"Post\" } & Pick<Post, \"title\" | \"body\">>;\n    };\n\nexport type AllPostsQueryVariables = {};\n\nexport type AllPostsQuery = { __typename?: \"Query\" } & {\n    posts: Array<{ __typename?: \"Post\" } & PostFragment>;\n};\n\nexport type UserWithPostsQueryVariables = {\n    userId: Scalars[\"ID\"];\n};\n\nexport type UserWithPostsQuery = { __typename?: \"Query\" } & {\n    user?: Maybe<{ __typename?: \"User\" } & UserWithPostsFragment>;\n};\n\nexport type CreatePostMutationVariables = {\n    post: CreatePostInput;\n};\n\nexport type CreatePostMutation = { __typename?: \"Mutation\" } & {\n    createPost: { __typename?: \"PostCreationResponse\" } & Pick<\n        PostCreationResponse,\n        \"success\" | \"message\"\n    > & { post?: Maybe<{ __typename?: \"Post\" } & PostFragment> };\n};\n\nexport type WhoAmIQueryVariables = {};\n\nexport type WhoAmIQuery = { __typename?: \"Query\" } & {\n    whoAmI?: Maybe<{ __typename?: \"User\" } & Pick<User, \"id\">>;\n};\n\nexport type LoginMutationVariables = {\n    email: Scalars[\"String\"];\n    password: Scalars[\"String\"];\n};\n\nexport type LoginMutation = { __typename?: \"Mutation\" } & {\n    login: { __typename?: \"UserLoginResponse\" } & Pick<\n        UserLoginResponse,\n        \"success\" | \"message\" | \"token\"\n    > & { user?: Maybe<{ __typename?: \"User\" } & Pick<User, \"id\">> };\n};\n\nexport type LogoutMutationVariables = {};\n\nexport type LogoutMutation = { __typename?: \"Mutation\" } & {\n    logout: { __typename?: \"MutationResponse\" } & Pick<MutationResponse, \"success\">;\n};\n\nexport type CreateUserMutationVariables = {\n    email: Scalars[\"String\"];\n    password: Scalars[\"String\"];\n};\n\nexport type CreateUserMutation = { __typename?: \"Mutation\" } & {\n    createUser: { __typename?: \"UserCreationResponse\" } & Pick<\n        UserCreationResponse,\n        \"success\" | \"message\"\n    > & { user?: Maybe<{ __typename?: \"User\" } & Pick<User, \"id\">> };\n};\n\nexport const PostFragmentDoc = gql`\n    fragment post on Post {\n        id\n        title\n        body\n        author {\n            email\n        }\n    }\n`;\nexport const UserWithPostsFragmentDoc = gql`\n    fragment userWithPosts on User {\n        email\n        posts {\n            title\n            body\n        }\n    }\n`;\nexport const AllPostsDocument = gql`\n    query allPosts {\n        posts {\n            ...post\n        }\n    }\n    ${PostFragmentDoc}\n`;\n\n/**\n * __useAllPostsQuery__\n *\n * To run a query within a React component, call `useAllPostsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllPostsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllPostsQuery(\n    baseOptions?: ApolloReactHooks.QueryHookOptions<AllPostsQuery, AllPostsQueryVariables>,\n) {\n    return ApolloReactHooks.useQuery<AllPostsQuery, AllPostsQueryVariables>(\n        AllPostsDocument,\n        baseOptions,\n    );\n}\nexport function useAllPostsLazyQuery(\n    baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n        AllPostsQuery,\n        AllPostsQueryVariables\n    >,\n) {\n    return ApolloReactHooks.useLazyQuery<AllPostsQuery, AllPostsQueryVariables>(\n        AllPostsDocument,\n        baseOptions,\n    );\n}\nexport type AllPostsQueryHookResult = ReturnType<typeof useAllPostsQuery>;\nexport type AllPostsLazyQueryHookResult = ReturnType<typeof useAllPostsLazyQuery>;\nexport type AllPostsQueryResult = ApolloReactCommon.QueryResult<\n    AllPostsQuery,\n    AllPostsQueryVariables\n>;\nexport const UserWithPostsDocument = gql`\n    query userWithPosts($userId: ID!) {\n        user(id: $userId) {\n            ...userWithPosts\n        }\n    }\n    ${UserWithPostsFragmentDoc}\n`;\n\n/**\n * __useUserWithPostsQuery__\n *\n * To run a query within a React component, call `useUserWithPostsQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserWithPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserWithPostsQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useUserWithPostsQuery(\n    baseOptions?: ApolloReactHooks.QueryHookOptions<\n        UserWithPostsQuery,\n        UserWithPostsQueryVariables\n    >,\n) {\n    return ApolloReactHooks.useQuery<UserWithPostsQuery, UserWithPostsQueryVariables>(\n        UserWithPostsDocument,\n        baseOptions,\n    );\n}\nexport function useUserWithPostsLazyQuery(\n    baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n        UserWithPostsQuery,\n        UserWithPostsQueryVariables\n    >,\n) {\n    return ApolloReactHooks.useLazyQuery<UserWithPostsQuery, UserWithPostsQueryVariables>(\n        UserWithPostsDocument,\n        baseOptions,\n    );\n}\nexport type UserWithPostsQueryHookResult = ReturnType<typeof useUserWithPostsQuery>;\nexport type UserWithPostsLazyQueryHookResult = ReturnType<typeof useUserWithPostsLazyQuery>;\nexport type UserWithPostsQueryResult = ApolloReactCommon.QueryResult<\n    UserWithPostsQuery,\n    UserWithPostsQueryVariables\n>;\nexport const CreatePostDocument = gql`\n    mutation createPost($post: CreatePostInput!) {\n        createPost(input: $post) {\n            success\n            message\n            post {\n                ...post\n            }\n        }\n    }\n    ${PostFragmentDoc}\n`;\nexport type CreatePostMutationFn = ApolloReactCommon.MutationFunction<\n    CreatePostMutation,\n    CreatePostMutationVariables\n>;\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      post: // value for 'post'\n *   },\n * });\n */\nexport function useCreatePostMutation(\n    baseOptions?: ApolloReactHooks.MutationHookOptions<\n        CreatePostMutation,\n        CreatePostMutationVariables\n    >,\n) {\n    return ApolloReactHooks.useMutation<CreatePostMutation, CreatePostMutationVariables>(\n        CreatePostDocument,\n        baseOptions,\n    );\n}\nexport type CreatePostMutationHookResult = ReturnType<typeof useCreatePostMutation>;\nexport type CreatePostMutationResult = ApolloReactCommon.MutationResult<CreatePostMutation>;\nexport type CreatePostMutationOptions = ApolloReactCommon.BaseMutationOptions<\n    CreatePostMutation,\n    CreatePostMutationVariables\n>;\nexport const WhoAmIDocument = gql`\n    query whoAmI {\n        whoAmI {\n            id\n        }\n    }\n`;\n\n/**\n * __useWhoAmIQuery__\n *\n * To run a query within a React component, call `useWhoAmIQuery` and pass it any options that fit your needs.\n * When your component renders, `useWhoAmIQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWhoAmIQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useWhoAmIQuery(\n    baseOptions?: ApolloReactHooks.QueryHookOptions<WhoAmIQuery, WhoAmIQueryVariables>,\n) {\n    return ApolloReactHooks.useQuery<WhoAmIQuery, WhoAmIQueryVariables>(\n        WhoAmIDocument,\n        baseOptions,\n    );\n}\nexport function useWhoAmILazyQuery(\n    baseOptions?: ApolloReactHooks.LazyQueryHookOptions<WhoAmIQuery, WhoAmIQueryVariables>,\n) {\n    return ApolloReactHooks.useLazyQuery<WhoAmIQuery, WhoAmIQueryVariables>(\n        WhoAmIDocument,\n        baseOptions,\n    );\n}\nexport type WhoAmIQueryHookResult = ReturnType<typeof useWhoAmIQuery>;\nexport type WhoAmILazyQueryHookResult = ReturnType<typeof useWhoAmILazyQuery>;\nexport type WhoAmIQueryResult = ApolloReactCommon.QueryResult<\n    WhoAmIQuery,\n    WhoAmIQueryVariables\n>;\nexport const LoginDocument = gql`\n    mutation login($email: String!, $password: String!) {\n        login(input: { email: $email, password: $password }) {\n            success\n            message\n            user {\n                id\n            }\n            token\n        }\n    }\n`;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<\n    LoginMutation,\n    LoginMutationVariables\n>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(\n    baseOptions?: ApolloReactHooks.MutationHookOptions<\n        LoginMutation,\n        LoginMutationVariables\n    >,\n) {\n    return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(\n        LoginDocument,\n        baseOptions,\n    );\n}\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<\n    LoginMutation,\n    LoginMutationVariables\n>;\nexport const LogoutDocument = gql`\n    mutation logout {\n        logout {\n            success\n        }\n    }\n`;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<\n    LogoutMutation,\n    LogoutMutationVariables\n>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(\n    baseOptions?: ApolloReactHooks.MutationHookOptions<\n        LogoutMutation,\n        LogoutMutationVariables\n    >,\n) {\n    return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(\n        LogoutDocument,\n        baseOptions,\n    );\n}\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<\n    LogoutMutation,\n    LogoutMutationVariables\n>;\nexport const CreateUserDocument = gql`\n    mutation createUser($email: String!, $password: String!) {\n        createUser(input: { email: $email, password: $password }) {\n            success\n            message\n            user {\n                id\n            }\n        }\n    }\n`;\nexport type CreateUserMutationFn = ApolloReactCommon.MutationFunction<\n    CreateUserMutation,\n    CreateUserMutationVariables\n>;\n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useCreateUserMutation(\n    baseOptions?: ApolloReactHooks.MutationHookOptions<\n        CreateUserMutation,\n        CreateUserMutationVariables\n    >,\n) {\n    return ApolloReactHooks.useMutation<CreateUserMutation, CreateUserMutationVariables>(\n        CreateUserDocument,\n        baseOptions,\n    );\n}\nexport type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;\nexport type CreateUserMutationResult = ApolloReactCommon.MutationResult<CreateUserMutation>;\nexport type CreateUserMutationOptions = ApolloReactCommon.BaseMutationOptions<\n    CreateUserMutation,\n    CreateUserMutationVariables\n>;\n","import React from \"react\";\nimport { Spinner } from \"@chakra-ui/core\";\n\ninterface LoadingContainerProps {\n  loading: boolean;\n}\n\nconst LoadingContainer: React.FunctionComponent<LoadingContainerProps> = ({\n  loading,\n  children,\n}) => (loading ? (\n  <Spinner\n    thickness=\"3px\"\n    speed=\"1s\"\n    emptyColor=\"gray.200\"\n    color=\"blue.500\"\n    size=\"xl\"\n  />\n) : <div>{children}</div>)\n\nexport default LoadingContainer\n","import React from \"react\";\nimport { Route, Redirect, RouteProps } from \"react-router-dom\";\nimport { useWhoAmIQuery } from \"../../graphql\";\nimport LoadingContainer from \"./LoadingContainer\";\n\ninterface PrivateRouteProps extends RouteProps {\n  redirect?: string;\n  mustBeLoggedOut?: boolean;\n}\n\nconst PrivateRoute: React.FunctionComponent<PrivateRouteProps> = ({\n  redirect,\n  location,\n  mustBeLoggedOut,\n  ...rest\n}) => {\n  const { loading, data } = useWhoAmIQuery({ fetchPolicy: \"no-cache\" })\n\n  const isLoggedIn = data?.whoAmI;\n  const shouldRedirect = mustBeLoggedOut ? isLoggedIn : !isLoggedIn;\n  return (\n    <LoadingContainer loading={loading}>\n      {shouldRedirect ? (\n        <Redirect\n          to={{\n            pathname: redirect || \"/login\",\n            state: { from: location },\n          }}\n        />\n      ) : (\n        <Route {...rest} />\n      )}\n    </LoadingContainer>\n  )\n}\n\nexport default PrivateRoute\n","import React from \"react\";\nimport { Stack, StackProps } from \"@chakra-ui/core\";\n\nconst InlineStack: React.FunctionComponent<StackProps> = (props) => (\n  <Stack\n    {...{\n      isInline: true,\n      align: \"center\",\n      ...props,\n    }}\n  />\n);\n\nexport default InlineStack;\n","import React from \"react\";\nimport { FormLabel, Input, InputProps } from \"@chakra-ui/core\";\nimport InlineStack from \"./InlineStack\";\n\ninterface InputWithLabelProps {\n  label: string;\n  labelWidth?: string;\n}\n\nconst InputWithLabel: React.FunctionComponent<InputWithLabelProps & InputProps> = ({\n  name,\n  label,\n  labelWidth,\n  ...rest\n}) => {\n  return (\n    <InlineStack my={8}>\n      <FormLabel width={labelWidth || 120} htmlFor={name}>\n        {label}\n      </FormLabel>\n      <Input name={name} display=\"inline-block\" {...rest} />\n    </InlineStack>\n  );\n};\n\nexport default InputWithLabel;\n","import React from \"react\";\nimport { FormControl, FormControlProps } from \"@chakra-ui/core\";\n\nconst Form: React.FunctionComponent<FormControlProps> = ({ children, onSubmit }) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <FormControl>{children}</FormControl>\n    </form>\n  );\n};\n\nexport default Form;\n","import React, { useState, FormEvent } from \"react\";\nimport { Text, Button, Flex } from \"@chakra-ui/core\";\nimport InputWithLabel from \"./InputWithLabel\";\nimport theme from \"../../theme\";\nimport Form from \"./Form\";\n\ninterface UserLoginArgs {\n  email: string;\n  password: string;\n}\n\ninterface LoginUserFormProps {\n  errorMessage: string;\n  handleSubmit(inputs: UserLoginArgs): void;\n}\n\nconst LoginUserForm: React.FunctionComponent<LoginUserFormProps> = ({\n  handleSubmit,\n  errorMessage,\n}) => {\n  const [inputs, setInputs] = useState({ email: \"\", password: \"\" });\n\n  const handleInputChange: React.FormEventHandler<HTMLInputElement> = (event) => {\n    const { name, value } = event.currentTarget;\n    setInputs({ ...inputs, [name]: value });\n  };\n\n  return (\n    <Form\n      onSubmit={(e: FormEvent): void => {\n        e.preventDefault();\n        handleSubmit(inputs);\n      }}>\n      <Text fontSize={\"3xl\"}>Welcome back!</Text>\n      <InputWithLabel\n        name=\"email\"\n        type=\"email\"\n        autoComplete=\"email\"\n        label=\"Email:\"\n        value={inputs.email}\n        placeholder=\"example@bitmatica.com\"\n        onChange={handleInputChange}\n        display=\"inline-block\"\n      />\n      <InputWithLabel\n        name=\"password\"\n        type=\"password\"\n        autoComplete=\"password\"\n        label=\"Password:\"\n        value={inputs.password}\n        isRequired\n        onChange={handleInputChange}\n      />\n      <Flex direction=\"row\" justifyContent=\"flex-end\">\n        <Button {...theme.buttons.variants.primary} type=\"submit\">\n          Login\n        </Button>\n      </Flex>\n      <Text color=\"red\">{errorMessage}</Text>\n    </Form>\n  );\n};\n\nexport default LoginUserForm;\n","import { useLoginMutation, LoginMutation, LoginMutationVariables } from \"../graphql\";\nimport { setJwt } from \"../utilities/jwtHelpers\";\nimport { MutationTuple } from \"@apollo/react-hooks\";\nimport { useStore } from \"../store/RootStore\";\nimport { useEffect } from \"react\";\n\nconst useLogin: () => MutationTuple<LoginMutation, LoginMutationVariables> = () => {\n  const useLoginResult = useLoginMutation();\n  const store = useStore();\n  const [, { called, loading, data }] = useLoginResult;\n  const jwt = data?.login?.token;\n\n  useEffect(() => {\n    if (called && !loading) {\n      if (jwt) {\n        setJwt(jwt);\n        store.currentUser.updateUser(data?.login.user);\n      } else {\n        throw new Error(\"Wrong username/password.\");\n      }\n    }\n  });\n\n  return useLoginResult;\n};\n\nexport default useLogin;\n","import { useEffect } from \"react\";\nimport { useApolloClient, MutationTuple } from \"@apollo/react-hooks\";\nimport { useStore } from \"../store/RootStore\";\nimport { resetJwt } from \"../utilities/jwtHelpers\";\nimport {\n  useLogoutMutation,\n  WhoAmIDocument,\n  LogoutMutation,\n  LogoutMutationVariables,\n} from \"../graphql\";\n\ntype UseLogoutResult = MutationTuple<LogoutMutation, LogoutMutationVariables>;\n\nexport default function useLogout(): UseLogoutResult {\n  const store = useStore();\n  const logoutMutationResult = useLogoutMutation();\n  const [, { called, loading, data }] = logoutMutationResult;\n  const apolloClient = useApolloClient();\n\n  useEffect(() => {\n    if (called && !loading && data?.logout.success) {\n      store.currentUser.reset();\n      resetJwt();\n      apolloClient.writeQuery({\n        query: WhoAmIDocument,\n        data: { whoAmI: null },\n      });\n    }\n  });\n\n  return logoutMutationResult;\n}\n","import React from \"react\";\nimport useLogout from \"../../hooks/useLogout\";\nimport { Redirect } from \"react-router-dom\";\nimport { Button, ButtonProps } from \"@chakra-ui/core\";\nimport theme from \"../../theme\";\n\nconst LogoutButton: React.FunctionComponent<ButtonProps> = (props) => {\n  const [logout, { called, loading, data }] = useLogout();\n  return called && !loading && data?.logout.success ? (\n    <Redirect to={\"login\"} />\n  ) : (\n    <Button\n      {...theme.buttons.variants.primary}\n      variant={\"outline\"}\n      onClick={(): void => {\n        logout();\n      }}\n      {...props}>\n      {props.children}\n    </Button>\n  );\n};\n\nexport default LogoutButton;\n","import React from \"react\";\nimport LogoutButton from \"./LogoutButton\";\nimport { Text, Icon, Flex } from \"@chakra-ui/core\";\nimport { useWhoAmIQuery } from \"../../graphql\";\nimport LoadingContainer from \"./LoadingContainer\";\n\nconst ICON_MARGIN = 8;\n\nconst Header: React.FunctionComponent = () => {\n  const { loading, data } = useWhoAmIQuery({ pollInterval: 400 })\n\n  return (\n    <LoadingContainer loading={loading}>\n      <Flex\n        direction=\"row\"\n        align=\"center\"\n        height={16}\n        color={\"white\"}\n        backgroundColor={\"primary\"}>\n        <Icon ml={ICON_MARGIN} name=\"view\" size=\"24px\" />\n        <Text ml={ICON_MARGIN} fontSize={\"4xl\"}>\n          Bitmatiblog\n        </Text>\n        {data?.whoAmI && (\n          <LogoutButton ml=\"auto\" mr={4}>\n            Logout\n          </LogoutButton>\n        )}\n      </Flex>\n    </LoadingContainer>\n  )\n}\n\nexport default Header\n","import React from \"react\";\nimport Header from \"../components/common/Header\";\nimport { Flex, Box } from \"@chakra-ui/core\";\nimport theme from \"../theme\";\n\nconst Layout: React.FunctionComponent = ({ children }) => {\n  return (\n    <Flex\n      border=\"1px solid black\"\n      alignContent=\"center\"\n      minHeight={\"100vh\"}\n      direction=\"column\">\n      <Header />\n      <Box\n        maxWidth={[\"100%\", \"100%\", theme.sizes[\"3xl\"]]}\n        width={[null, null, \"80%\"]}\n        mx={[4, 4, \"0 auto\"]}\n        pt={[4]}\n        bg=\"blackAlpha.50\"\n        flexGrow={2}>\n        {children}\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Layout;\n","import React, { useState } from \"react\";\nimport { RouteComponentProps, Redirect } from \"react-router-dom\";\nimport { Box } from \"@chakra-ui/core\";\nimport LoginUserForm from \"../components/common/LoginUserForm\";\nimport { LoginMutationVariables } from \"../graphql\";\nimport useLogin from \"../hooks/useLogin\";\nimport Layout from \"./Layout\";\n\nconst Login: React.FunctionComponent<RouteComponentProps> = () => {\n  const [login, { data }] = useLogin();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const message = !data?.login.success && data?.login.message;\n  if (message && message !== errorMessage) {\n    setErrorMessage(message);\n  }\n\n  const handleSubmit = async (variables: LoginMutationVariables): Promise<void> => {\n    login({ variables });\n  };\n\n  return data?.login.success ? (\n    <Redirect to={\"/\"} />\n  ) : (\n    <Layout>\n      <Box pt={8}>\n        <LoginUserForm handleSubmit={handleSubmit} errorMessage={errorMessage} />\n      </Box>\n    </Layout>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport { Post as IPost } from \"../graphql\";\n\ninterface PostProps {\n  post: Partial<IPost>;\n}\n\nconst Post: React.FunctionComponent<PostProps> = ({ post }) => (\n  <div>\n    <div>{post.id}</div>\n    <div>{post.title}</div>\n    <div>{post.body}</div>\n  </div>\n);\n\nexport default Post;\n","import React from \"react\";\nimport { Post as IPost } from \"../graphql\";\nimport Post from \"./Post\";\n\ninterface PostsProps {\n  posts?: Partial<IPost>[];\n}\n\nconst Posts: React.FunctionComponent<PostsProps> = ({ posts }) =>\n  posts?.length ? (\n    <div>\n      {posts.map(\n        (p: Partial<IPost>): React.ReactElement => (\n          <Post key={p.id} post={p} />\n        ),\n      )}\n    </div>\n  ) : (\n    <div>No posts!</div>\n  );\n\nexport default Posts;\n","import React from \"react\";\nimport { useUserWithPostsQuery } from \"../graphql\";\nimport LoadingContainer from \"./common/LoadingContainer\";\nimport Posts from \"./Posts\";\n\ninterface UserProfileProps {\n  userId: string;\n}\n\nconst UserProfile: React.FunctionComponent<UserProfileProps> = ({ userId }) => {\n  const { loading, data } = useUserWithPostsQuery({ variables: { userId } });\n\n  return (\n    <LoadingContainer loading={loading}>\n      <div>User profile</div>\n      <div>Id: {userId}</div>\n      <div>Email: {data?.user?.email}</div>\n      <div>\n        Posts: <Posts posts={data?.user?.posts || []} />\n      </div>\n    </LoadingContainer>\n  );\n};\n\nexport default UserProfile;\n","import produce from \"immer\";\nimport {\n  CreatePostMutationHookResult,\n  useCreatePostMutation,\n  AllPostsDocument,\n  AllPostsQuery,\n  Post,\n} from \"../graphql\";\n\nexport default function useCreatePost(): CreatePostMutationHookResult {\n  return useCreatePostMutation({\n    update: (cache, data): void => {\n      const post = data?.data?.createPost?.post;\n      const allPostsCache = cache.readQuery({\n        query: AllPostsDocument,\n      });\n\n      // todo error handling\n      cache.writeQuery({\n        query: AllPostsDocument,\n        data: produce(allPostsCache, (draftAllPostsCache: AllPostsQuery): void => {\n          draftAllPostsCache.posts.push(post as Post);\n        }),\n      });\n    },\n  });\n}\n","import React, { useState } from \"react\";\nimport useCreatePost from \"../hooks/useCreatePost\";\n\ninterface CreatePostFormProps {\n  authorId: string;\n}\n\nconst CreatePostForm: React.FunctionComponent<CreatePostFormProps> = ({ authorId }) => {\n  const [createPost] = useCreatePost();\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const post = {\n    title,\n    authorId,\n    body,\n  };\n  return (\n    <form\n      onSubmit={(e): void => {\n        e.preventDefault();\n        createPost({ variables: { post } });\n      }}>\n      Create Post:\n      <input value={title} onChange={(newTitle): void => setTitle(newTitle.target.value)} />\n      <input value={body} onChange={(newBody): void => setBody(newBody.target.value)} />\n      <input value=\"Submit\" type=\"submit\" />\n    </form>\n  );\n};\n\nexport default CreatePostForm;\n","import React from \"react\";\nimport { RouteProps } from \"react-router-dom\";\nimport UserProfile from \"../components/UserProfile\";\nimport Layout from \"./Layout\";\nimport CreatePostForm from \"../components/CreatePostForm\";\nimport { useWhoAmIQuery } from \"../graphql\";\nimport LoadingContainer from \"../components/common/LoadingContainer\";\n\nconst Home: React.FunctionComponent<RouteProps> = () => {\n  const { loading, data } = useWhoAmIQuery()\n  const id = data?.whoAmI?.id || \"\"\n  return (\n    <Layout>\n      <LoadingContainer loading={loading}>\n        <CreatePostForm authorId={id} />\n        <UserProfile userId={id} />\n      </LoadingContainer>\n    </Layout>\n  )\n}\n\nexport default Home;\n","import React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport UserProfile from \"../components/UserProfile\";\nimport Layout from \"./Layout\";\n\ninterface MatchParams {\n  userId: string;\n}\n\nconst User: React.FunctionComponent<RouteComponentProps<MatchParams>> = ({ match }) => (\n  <Layout>\n    <UserProfile userId={match.params.userId} />\n  </Layout>\n);\n\nexport default User;\n","import React from \"react\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport { RouteProps } from \"react-router-dom\";\n\ninterface OnlyLoggedOutRouteProps extends RouteProps {\n  redirect?: string;\n}\n\nexport const OnlyLoggedOutRoute: React.FunctionComponent<OnlyLoggedOutRouteProps> = ({\n  redirect,\n  ...rest\n}) => {\n  return <PrivateRoute redirect={redirect || \"/\"} mustBeLoggedOut={true} {...rest} />;\n};\n\nexport default OnlyLoggedOutRoute;\n","import React from \"react\";\nimport capitalize from \"lodash.capitalize\";\nimport get from \"lodash.get\";\n\ninterface FormInputProps {\n  values: { [key: string]: string | number };\n  handleChange: (event: React.FormEvent<HTMLInputElement>) => void;\n}\n\nconst SPECIAL_INPUTS = [\"email\", \"password\"];\n\nconst FormInputs: React.FunctionComponent<FormInputProps> = ({ values, handleChange }) => {\n  return (\n    <div>\n      {Object.keys(values).map(\n        (key): JSX.Element => {\n          const type = SPECIAL_INPUTS.includes(key) ? key : \"text\";\n          return (\n            <label key={key}>\n              {capitalize(key)}\n              <input\n                type={type}\n                name={key}\n                onChange={handleChange}\n                value={get(values, [key])}\n              />\n            </label>\n          );\n        },\n      )}\n    </div>\n  );\n};\nexport default FormInputs;\n","import React, { FormEvent } from \"react\";\nimport FormInputs from \"./FormInputs\";\n\ninterface RegisterUserFormProps {\n  inputs: { [key: string]: string | number };\n  errorMessage?: string;\n  handleSubmit(): void;\n  handleUpdate(event: React.FormEvent<HTMLInputElement>): void;\n}\n\nconst RegisterUserForm: React.FunctionComponent<RegisterUserFormProps> = ({\n  inputs,\n  errorMessage,\n  handleSubmit,\n  handleUpdate,\n}) => {\n  return (\n    <form\n      onSubmit={(event: FormEvent): void => {\n        if (event) {\n          event.preventDefault();\n        }\n        handleSubmit();\n      }}>\n      Register User Form\n      <FormInputs values={inputs} handleChange={handleUpdate} />\n      <input type=\"submit\" value=\"Submit\" />\n      <div>{errorMessage}</div>\n    </form>\n  );\n};\n\nexport default RegisterUserForm;\n","import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport RegisterUserForm from \"../components/common/RegisterUserForm\";\nimport { CreateUserMutationVariables, useCreateUserMutation } from \"../graphql\";\nimport useLogin from \"../hooks/useLogin\";\nimport Layout from \"./Layout\";\n\nconst INITIAL_REGISTER_USER_FORM_STATE = {\n  email: \"\",\n  password: \"\",\n};\n\nconst RegisterUser: React.FunctionComponent = () => {\n  const [inputs, setInputs] = useState(INITIAL_REGISTER_USER_FORM_STATE);\n  const [createUser, { data: registerUserData }] = useCreateUserMutation();\n  const [login, { called, loading, data: loginData }] = useLogin();\n\n  if (registerUserData?.createUser.success && !called) {\n    login({ variables: inputs });\n  }\n\n  const handleSubmit = (): void => {\n    createUser({ variables: inputs });\n  };\n\n  const handleUpdate = (event: React.FormEvent<HTMLInputElement>): void => {\n    const { name, value } = event.currentTarget;\n    setInputs((inputs): CreateUserMutationVariables => ({ ...inputs, [name]: value }));\n  };\n\n  return !loading && loginData?.login.success ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <Layout>\n      <RegisterUserForm\n        inputs={inputs}\n        errorMessage={registerUserData?.createUser.message}\n        handleSubmit={handleSubmit}\n        handleUpdate={handleUpdate}\n      />\n    </Layout>\n  );\n};\n\nexport default RegisterUser;\n","import React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\ninterface MatchParams {\n}\n\nconst OAuthApps: React.FunctionComponent<RouteComponentProps<MatchParams>> = ({ match }) => (\n    <Layout>\n        <a href={'/apps/gusto'}>Connect Gusto</a>\n    </Layout>\n);\n\nexport default OAuthApps;\n","import React, { useEffect, useState } from \"react\";\nimport { SERVER_REST_URI } from \"../config\";\nimport { getJwt } from \"../utilities/jwtHelpers\";\nimport fetch from \"node-fetch\";\n\nexport default function GustoLogin() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n  useEffect(() => {\n    fetch(SERVER_REST_URI + \"/oauth/gusto\", {\n      headers: {\n        \"Authorization\": `Bearer ${getJwt()}`,\n      },\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          window.location = result.uri\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [])\n\n  if (error) {\n    // @ts-ignore\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n        <div></div>\n    );\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport getApolloClient from \"./getApolloClient\";\nimport theme from \"./theme\";\nimport { ThemeProvider, CSSReset } from \"@chakra-ui/core\";\nimport { StoreProvider, useStore } from \"./store/RootStore\";\nimport PrivateRoute from \"./components/common/PrivateRoute\";\nimport Login from \"./pages/Login\";\nimport Home from \"./pages/Home\";\nimport User from \"./pages/User\";\nimport OnlyLoggedOutRoute from \"./components/common/OnlyLoggedOutRoute\";\nimport RegisterUser from \"./pages/RegisterUser\";\nimport OAuthApps from \"./pages/OAuthApps\";\nimport GustoLogin from \"./pages/GustoLogin\";\n\nconst apolloClient = getApolloClient();\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(window as any).apolloClient = apolloClient;\n\nconst App: React.FunctionComponent = () => {\n  const store = useStore();\n  return (\n    <StoreProvider value={store}>\n      <ThemeProvider theme={theme}>\n        <CSSReset />\n        <BrowserRouter>\n          <ApolloProvider client={apolloClient}>\n            <Switch>\n              <OnlyLoggedOutRoute path=\"/login\" component={Login} />\n              <OnlyLoggedOutRoute path=\"/register\" component={RegisterUser} />\n              <PrivateRoute path={\"/user/:userId\"} component={User} />\n              <PrivateRoute path={\"/oauth/connect\"} component={OAuthApps} />\n              <PrivateRoute path={\"/apps/gusto\"} component={GustoLogin} />\n              <PrivateRoute path=\"*\" component={Home} />\n            </Switch>\n          </ApolloProvider>\n        </BrowserRouter>\n      </ThemeProvider>\n    </StoreProvider>\n  );\n};\n\nexport default App;\n","import { ApolloClient } from \"apollo-boost\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport { ApolloLink } from \"apollo-link\";\nimport { setContext } from \"apollo-link-context\";\nimport { onError } from \"apollo-link-error\";\nimport { SERVER_URI } from \"./config\";\nimport { getJwt } from \"./utilities/jwtHelpers\";\n\nexport default function getApolloClient(): ApolloClient<NormalizedCacheObject> {\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  const authLink = setContext((_, { headers }) => {\n    const token = getJwt();\n    return {\n      headers: {\n        ...headers,\n        ...(token && token !== \"null\" && { authorization: `Bearer ${token}` }),\n      },\n    };\n  });\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    // todo check for auth token errors and redirect\n    if (graphQLErrors)\n      graphQLErrors.map(({ message, locations, path }) =>\n        console.log(\n          `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n        ),\n      );\n\n    if (networkError) console.log(`[Network error]: ${networkError}`);\n  });\n\n  const httpLink = createHttpLink({\n    uri: SERVER_URI,\n  });\n\n  const cache = new InMemoryCache();\n  return new ApolloClient({\n    cache,\n    link: ApolloLink.from([authLink, errorLink, httpLink]),\n    connectToDevTools: true,\n  });\n}\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href,\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}